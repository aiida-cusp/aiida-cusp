.. _user-guide-custodian-jobs:

Custodian Jobs
==============

Beside the usual Custodian error handlers for VASP calculations, this plugin also allows to define multiple Custodian jobs to a VASP calculation.
For this purpose an additional ``jobs`` input, similar to the ``handler`` input for error handler configurations, is available as part of the more general ``inputs.custodian`` input namespace for VASP calculations.

The inputs, passed to the calculation via the ``jobs`` input key are expected to be of type :class:`custodian.vasp.jobs.VaspJob`, if a single job is connected to the calculation.
However, if multiple jobs are connected, then those jobs are expected to be passed as a :class:`list` of :class:`~custodian.vasp.jobs.VaspJob` to the ``jobs`` input.

Note that although the plugin accepts the original Custodian :class:`~custodian.vasp.jobs.VaspJob` class as input, some limitations exists due to the coupling with AiiDA, which have to be considered during the Custodian job setup process.
These limitations affect the defined :ref:`VASP executable<user-guide-custodian-jobs-limitation-exec>` as well as the chosen :ref:`calculation suffix<user-guide-custodian-jobs-limitation-suffix>`, which may be defined for each job, and will be discussed briefly in the following.


.. _user-guide-custodian-jobs-limitation-exec:

VASP Executable for Custodian Jobs
----------------------------------

In order to use Custodian jobs with this plugin, two different :class:`~aiida.orm.Code` objects have to be passed to the calculation, which contain the references and definitions for the actual VASP executable and the Custodian executable, respectively.

.. note::

   Please also refer to the :ref:`user-guide-calculators-vaspcalculator-inputs-vasp` and :ref:`Custodian Settings<user-guide-calculators-vaspcalculator-inputs-custodian>` sections as part of the :class:`~aiida_cusp.calculators.VaspCalculation` documentation, which discuss the required and / or optional code inputs for calculations in more detail

Therefore, the actual VASP executable is already fully defined via the non-optional :class:`~aiida.orm.Code` object and does not need to be set when setting up one or multiple :class:`~custodian.vasp.jobs.VaspJob` objects that will be connected to the calculation.
Thus, instead of passing an explicit input, defining the VASP command to be run, it is sufficient to simply initialize the ``vasp_cmd`` parameter on the :class:`~custodian.jobs.vasp.VaspJob` object with value :class:`None`, when used with calculations defined by this plugin.
For instance:

.. code-block:: python

   from custodian.vasp.jobs import VaspJob
   double_relax = VaspJob.double_relaxation_run(None)

Note that the same also applies when the Custodian job is not setup from one of the provided constructor, as shown in the example above, but rather initialized directly from the :class:`~custodian.jobs.vasp.VaspJob` class:

.. code-block:: python

   from custodian.vasp.jobs import VaspJob
   custodian_job = VaspJob(None)


.. _user-guide-custodian-jobs-limitation-suffix:

Suffixes for Custodian Jobs
---------------------------

Each Custodian job allows the setup of an individual suffix that is appended to the files generated by one job, in order to distinguish the output files if several different Custodian jobs were involved in the calculation.
When connected to a VASP calculation this job suffix will become part of the output namespace used by AiiDA to store and connect the corresponding files as calculation outputs.
For two, individual jobs with suffixes ``.relax1`` and ``.relax2`` this would result in an output section with the following layout:

.. code-block:: bash

   Outputs             PK    Type
   ------------------  ----  ---------------
   parsed_results
       relax1
           contcar     1598  VaspContcarData
           vasprun_xm  1600  VaspGenericData
           outcar      1602  VaspOutcarData
       relax2
           contcar     1599  VaspContcarData
           vasprun_xm  1601  VaspGenericData
           outcar      1603  VaspOutcarData
   remote_folder       1596  RemoteData
   retrieved           1597  FolderData


Since AiiDA only allows alpha-numeric characters to be used as namespace identifiers, this limitation also directly applies to the chosen job suffixes, which may also **only contain alpha-numerical characters** (all non alpha-numeric characters will be replaced with underscores during the parsing stage, except for the first suffix character which is assumed to be the delimiter, separating the suffix from the actual file name. See below for further information)

Also note that each suffix that is setup for a job has to contain an explicit delimiter, i.e.

.. code-block:: python

   job = VaspJob(..., suffix=".suffix", ...)

rather than simply setting

.. code-block:: python

   job = VaspJob(..., suffix="suffix", ...)

If not delimiter is given, like in the latter case, the first character of the defined suffix, i.e. `s`, will be treated as the delimiter which may lead to unwanted consequences, confusion and possibly errors.
